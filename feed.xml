<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://parttimelegend.github.io/gistbook/feed.xml" rel="self" type="application/atom+xml" /><link href="https://parttimelegend.github.io/gistbook/" rel="alternate" type="text/html" /><updated>2022-11-23T08:16:20+00:00</updated><id>https://parttimelegend.github.io/gistbook/feed.xml</id><title type="html">Gistbook</title><subtitle>a simple way to organize your Gists in one place - Gistbook</subtitle><author><name>Tomáš Krupka</name></author><entry><title type="html">Pulumi fails to install on WSL Ubuntu Jammy</title><link href="https://parttimelegend.github.io/gistbook/gist/88b2ed70728f86aa870556b9189d0ed0" rel="alternate" type="text/html" title="Pulumi fails to install on WSL Ubuntu Jammy" /><published>2022-09-23T15:09:10+00:00</published><updated>2022-09-23T15:09:10+00:00</updated><id>https://parttimelegend.github.io/gistbook/gist/88b2ed70728f86aa870556b9189d0ed0</id><author><name>Tomáš Krupka</name></author><category term="gist" /><summary type="html"><![CDATA[#!/usr/bin/env bash printf &#39;#!/bin/sh\nexec /lib64/ld-linux-x86-64.so.2 /usr/bin/gzip &quot;$@&quot;&#39; | sudo tee /usr/local/bin/gzip sudo chmod +x /usr/local/bin/gzip curl -fsSL https://get.pulumi.com | sh]]></summary></entry><entry><title type="html">PullAllRepos.ps1</title><link href="https://parttimelegend.github.io/gistbook/gist/f3012ec59657543e11356ba4f989f26c" rel="alternate" type="text/html" title="PullAllRepos.ps1" /><published>2022-07-28T12:18:39+00:00</published><updated>2022-07-28T12:18:39+00:00</updated><id>https://parttimelegend.github.io/gistbook/gist/f3012ec59657543e11356ba4f989f26c</id><author><name>Tomáš Krupka</name></author><category term="gist" /><summary type="html"><![CDATA[$orgs = @(&quot;whereyouwork&quot;) $users = @(&quot;parttimelegend&quot;) $githubToken = $ENV:GitHubToken $workspace = &quot;C:\workspace&quot; $timeout = 3600 function Clone-Repos-For-Org() { param( [Parameter(Mandatory=$true)][string]$org ) github-archive -o $org --clone -t $githubToken -ht -l $workspace --timeout $timeout } function Pull-Repos-For-Org() { param( [Parameter(Mandatory=$true)][string]$org ) github-archive -o $org --pull -t $githubToken -ht -l $workspace --timeout $timeout } function Clone-Repos-For-User() { param( [Parameter(Mandatory=$true)][string]$user ) github-archive -u $user --clone -t $githubToken -ht -l $workspace --timeout $timeout } function Pull-Repos-For-User() { param( [Parameter(Mandatory=$true)][string]$user ) github-archive -u $user --pull -t $githubToken -ht -l $workspace --timeout $timeout } foreach($org in $orgs) { Clone-Repos-For-Org $org Pull-Repos-For-Org $org } foreach($user in $users) { Clone-Repos-For-User $user Pull-Repos-For-User $user }]]></summary></entry><entry><title type="html">Export Terraform from existing AWS Infrastructure with Terraforming</title><link href="https://parttimelegend.github.io/gistbook/gist/29e2d2d9c52c3cd8815de0818772bc5a" rel="alternate" type="text/html" title="Export Terraform from existing AWS Infrastructure with Terraforming" /><published>2021-07-22T09:49:34+00:00</published><updated>2021-07-22T09:49:34+00:00</updated><id>https://parttimelegend.github.io/gistbook/gist/29e2d2d9c52c3cd8815de0818772bc5a</id><author><name>Tomáš Krupka</name></author><category term="gist" /><summary type="html"><![CDATA[terraforming alb &gt; alb.tf --use-bundled-cert # ALB terraforming asg &gt; asg.tf --use-bundled-cert # AutoScaling Group terraforming cwa &gt; cwa.tf --use-bundled-cert # CloudWatch Alarm terraforming dbpg &gt; dbpg.tf --use-bundled-cert # Database Parameter Group terraforming dbsg &gt; dbsg.tf --use-bundled-cert # Database Security Group terraforming dbsn &gt; dbsn.tf --use-bundled-cert # Database Subnet Group terraforming ddb &gt; ddb.tf --use-bundled-cert # DynamoDB terraforming ec2 &gt; ec2.tf --use-bundled-cert # EC2 terraforming ecc &gt; ecc.tf --use-bundled-cert # ElastiCache Cluster terraforming ecsn &gt; ecsn.tf --use-bundled-cert # ElastiCache Subnet Group terraforming efs &gt; efs.tf --use-bundled-cert # EFS File System terraforming eip &gt; eip.tf --use-bundled-cert # EIP terraforming elb &gt; elb.tf --use-bundled-cert # ELB terraforming iamg &gt; iamg.tf --use-bundled-cert # IAM Group terraforming iamgm &gt; iamgm.tf --use-bundled-cert # IAM Group Membership terraforming iamgp &gt; iamgp.tf --use-bundled-cert # IAM Group Policy terraforming iamip &gt; iamip.tf --use-bundled-cert # IAM Instance Profile terraforming iamp &gt; iamp.tf --use-bundled-cert # IAM Policy terraforming iampa &gt; iampa.tf --use-bundled-cert # IAM Policy Attachment terraforming iamr &gt; iamr.tf --use-bundled-cert # IAM Role terraforming iamrp &gt; iamrp.tf --use-bundled-cert # IAM Role Policy terraforming iamu &gt; iamu.tf --use-bundled-cert # IAM User terraforming iamup &gt; iamup.tf --use-bundled-cert # IAM User Policy terraforming igw &gt; igw.tf --use-bundled-cert # Internet Gateway terraforming kmsa &gt; kmsa.tf --use-bundled-cert # KMS Key Alias terraforming kmsk &gt; kmsk.tf --use-bundled-cert # KMS Key terraforming lc &gt; lc.tf --use-bundled-cert # Launch Configuration terraforming nacl &gt; nacl.tf --use-bundled-cert # Network ACL terraforming nat &gt; nat.tf --use-bundled-cert # NAT Gateway terraforming nif &gt; nif.tf --use-bundled-cert # Network Interface terraforming r53r &gt; r53r.tf --use-bundled-cert # Route53 Record terraforming r53z &gt; r53z.tf --use-bundled-cert # Route53 Hosted Zone terraforming rds &gt; rds.tf --use-bundled-cert # RDS terraforming rs &gt; rs.tf --use-bundled-cert # Redshift terraforming rt &gt; rt.tf --use-bundled-cert # Route Table terraforming rta &gt; rta.tf --use-bundled-cert # Route Table Association terraforming s3 &gt; s3.tf --use-bundled-cert # S3 terraforming sg &gt; sg.tf --use-bundled-cert # Security Group terraforming sn &gt; sn.tf --use-bundled-cert # Subnet terraforming snst &gt; snst.tf --use-bundled-cert # SNS Topic terraforming snss &gt; snss.tf --use-bundled-cert # SNS Subscription terraforming sqs &gt; sqs.tf --use-bundled-cert # SQS terraforming vgw &gt; vgw.tf --use-bundled-cert # VPN Gateway terraforming vpc &gt; vpc.tf --use-bundled-cert # VPC]]></summary></entry><entry><title type="html">snapshots-by-ec2-name.py</title><link href="https://parttimelegend.github.io/gistbook/gist/b5de8b455d059e15742a7976dce75708" rel="alternate" type="text/html" title="snapshots-by-ec2-name.py" /><published>2021-07-20T14:34:33+00:00</published><updated>2021-07-20T14:34:33+00:00</updated><id>https://parttimelegend.github.io/gistbook/gist/b5de8b455d059e15742a7976dce75708</id><author><name>Tomáš Krupka</name></author><category term="gist" /><summary type="html"><![CDATA[import boto3 ec2Client = boto3.client(&#39;ec2&#39;) ec2Resource = boto3.resource(&#39;ec2&#39;) for instance in ec2Resource.instances.all(): for tag in instance.tags: if tag[&#39;Key&#39;] == &#39;Name&#39;: list_of_snapshots = [] check_value = [] check_value.append(tag[&#39;Value&#39;] + &#39;*&#39;) snapshotsByTag = ec2Client.describe_snapshots(Filters=[{&#39;Name&#39;:&#39;tag:Name&#39;, &#39;Values&#39;: [check_value[0]]}])[&#39;Snapshots&#39;] snapshotsByDescription = ec2Client.describe_snapshots(Filters=[{&#39;Name&#39;:&#39;description&#39;, &#39;Values&#39;: [check_value[0]]}])[&#39;Snapshots&#39;] for tag in instance.tags: if tag[&#39;Key&#39;] == &#39;Environment&#39;: for snapshot in snapshotsByTag: if snapshot: list_of_snapshots.append(snapshot[&#39;SnapshotId&#39;]) ec2Client.create_tags(Resources=[snapshot[&#39;SnapshotId&#39;]], Tags=[{&#39;Key&#39;:&#39;Environment&#39;, &#39;Value&#39;:tag[&#39;Value&#39;]}], DryRun=False) for snapshot in snapshotsByDescription: if snapshot: ec2Client.create_tags(Resources=[snapshot[&#39;SnapshotId&#39;]], Tags=[{&#39;Key&#39;:&#39;Environment&#39;, &#39;Value&#39;:tag[&#39;Value&#39;]}], DryRun=False)]]></summary></entry><entry><title type="html">OutOfDateNuget.ps1</title><link href="https://parttimelegend.github.io/gistbook/gist/804ef0faf3b483009ee6eda3867deedb" rel="alternate" type="text/html" title="OutOfDateNuget.ps1" /><published>2021-07-19T15:31:59+00:00</published><updated>2021-07-19T15:31:59+00:00</updated><id>https://parttimelegend.github.io/gistbook/gist/804ef0faf3b483009ee6eda3867deedb</id><author><name>Tomáš Krupka</name></author><category term="gist" /><summary type="html"><![CDATA[dotnet tool update --global dotnet-outdated-tool $errorCount = 0 Get-ChildItem -Path .\ -Filter *.csproj -Recurse -File -Name| ForEach-Object { [System.IO.Path]::GetFileNameWithoutExtension($_) dotnet outdated $_ -f -inc CB. -u if ($LASTEXITCODE -ne 0) { $errorCount++ } } if ($errorCount -gt 0) { Write-Output &quot;Failing build due to out-of-date Cloudbooking Packages&quot; #[Environment]::Exit(-1) }]]></summary></entry><entry><title type="html">Windows Defender Remover</title><link href="https://parttimelegend.github.io/gistbook/gist/54b8775f9193f66de5991407e94a6ca7" rel="alternate" type="text/html" title="Windows Defender Remover" /><published>2021-06-03T08:49:06+00:00</published><updated>2021-06-03T08:49:06+00:00</updated><id>https://parttimelegend.github.io/gistbook/gist/54b8775f9193f66de5991407e94a6ca7</id><author><name>Tomáš Krupka</name></author><category term="gist" /><summary type="html"><![CDATA[if (!([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] &quot;Administrator&quot;)) { Start-Process powershell.exe &quot;-NoProfile -ExecutionPolicy Bypass -File `&quot;$PSCommandPath`&quot;&quot; -Verb RunAs; exit } Write-Output &quot;Disabling Windows Defender&quot; Set-MpPreference -DisableRealtimeMonitoring $true Write-Output &quot;Uninstalling Windows Defender&quot; Uninstall-WindowsFeature -Name Windows-Defender Write-Output &quot;Preventing future installation of Windows Defender&quot; Invoke-Expression Dism /online /Disable-Feature /FeatureName:Windows-Defender /Remove /NoRestart /quiet]]></summary></entry><entry><title type="html">regions.tf</title><link href="https://parttimelegend.github.io/gistbook/gist/46fa328a8271568316675e8cb02e77e6" rel="alternate" type="text/html" title="regions.tf" /><published>2021-04-23T21:46:05+00:00</published><updated>2021-04-23T21:46:05+00:00</updated><id>https://parttimelegend.github.io/gistbook/gist/46fa328a8271568316675e8cb02e77e6</id><author><name>Tomáš Krupka</name></author><category term="gist" /><summary type="html"><![CDATA[variable &quot;az_region&quot; { type = string default = &quot;UK South&quot; } variable &quot;az_region_abbr_map&quot; { type = map(any) description = &quot;Map is used to obtain 3 letter azure region abreviation for naming resources&quot; default = { &quot;Central US&quot; = &quot;cus&quot; &quot;East US 2&quot; = &quot;eus2&quot; &quot;East US&quot; = &quot;eus&quot; &quot;North Central US&quot; = &quot;ncus&quot; &quot;South Central US&quot; = &quot;nsus&quot; &quot;West US 2&quot; = &quot;wus2&quot; &quot;West Central US&quot; = &quot;wcus&quot; &quot;West US,US DoD Central&quot; = &quot;wusd&quot; &quot;US DoD East&quot; = &quot;usde&quot; &quot;US Gov. Arizona&quot; = &quot;usga&quot; &quot;US Gov. Iowa&quot; = &quot;usgi&quot; &quot;US Gov. Texas&quot; = &quot;usgt&quot; &quot;US Gov. Virginia&quot; = &quot;usgv&quot; &quot;US Sec East&quot; = &quot;usse&quot; &quot;US Sec West&quot; = &quot;ussw&quot; &quot;Canada Central&quot; = &quot;cc&quot; &quot;Canade East&quot; = &quot;ce&quot; &quot;Brazil South&quot; = &quot;bs&quot; &quot;North Europe&quot; = &quot;eun&quot; &quot;West Europe&quot; = &quot;euw&quot; &quot;UK South&quot; = &quot;uks&quot; &quot;UK West&quot; = &quot;ukw&quot; &quot;Germany North&quot; = &quot;gn&quot; &quot;Germany West Central&quot; = &quot;gwc&quot; &quot;Switzerland North&quot; = &quot;sn&quot; &quot;Switzerland West&quot; = &quot;sw&quot; &quot;Norway West&quot; = &quot;nw&quot; &quot;Norway East&quot; = &quot;ne&quot; &quot;East Asia&quot; = &quot;ea&quot; &quot;Southeast Asia&quot; = &quot;sa&quot; &quot;Australia Central&quot; = &quot;ac&quot; &quot;Australia Central 2&quot; = &quot;ac2&quot; &quot;Australia East&quot; = &quot;ae&quot; &quot;Australia Southeast&quot; = &quot;as&quot; &quot;China East&quot; = &quot;ce&quot; &quot;China North&quot; = &quot;cn&quot; &quot;China East 2&quot; = &quot;ce2&quot; &quot;China North 2&quot; = &quot;cn2&quot; &quot;Central India&quot; = &quot;ci&quot; &quot;South India&quot; = &quot;si&quot; &quot;West India&quot; = &quot;wi&quot; &quot;Japan East&quot; = &quot;je&quot; &quot;Japan West&quot; = &quot;jw&quot; &quot;Korea Central&quot; = &quot;kc&quot; &quot;Korea South&quot; = &quot;ks&quot; &quot;South Africa North&quot; = &quot;san&quot; &quot;South Africa West&quot; = &quot;saw&quot; &quot;UAE Central&quot; = &quot;uc&quot; &quot;UAE North&quot; = &quot;un&quot; } }]]></summary></entry><entry><title type="html">Break Lease on File in Azure Blob Storage</title><link href="https://parttimelegend.github.io/gistbook/gist/3febf7f08caa3afbade6ef7ce7c12acd" rel="alternate" type="text/html" title="Break Lease on File in Azure Blob Storage" /><published>2021-04-14T13:49:10+00:00</published><updated>2021-04-14T13:49:10+00:00</updated><id>https://parttimelegend.github.io/gistbook/gist/3febf7f08caa3afbade6ef7ce7c12acd</id><author><name>Tomáš Krupka</name></author><category term="gist" /><summary type="html"><![CDATA[$blobName = &quot;&quot; $resourceGroup = &quot;&quot; $storageAccount = &quot;&quot; $container = &quot;&quot; $context = (Get-AzStorageAccount -ResourceGroupName $resourceGroup -AccountName $storageAccount).Context $blob = (Get-AzStorageBlob -Context $context -Container $container -Blob $blobName) $leaseStatus = $blob.ICloudBlob.Properties.LeaseStatus; switch ($leaseStatus) { &quot;Locked&quot; { $blob.ICloudBlob.BreakLease() Write-Output &quot;Successfully broken lease on ${blobName}&quot; } Default { Write-Output &quot;No need to break lease on ${blobName}&quot; } }]]></summary></entry><entry><title type="html">Determine a Azure VM running status</title><link href="https://parttimelegend.github.io/gistbook/gist/0a028614d290423835630240a7a9f676" rel="alternate" type="text/html" title="Determine a Azure VM running status" /><published>2021-04-07T14:49:41+00:00</published><updated>2021-04-07T14:49:41+00:00</updated><id>https://parttimelegend.github.io/gistbook/gist/0a028614d290423835630240a7a9f676</id><author><name>Tomáš Krupka</name></author><category term="gist" /><summary type="html"><![CDATA[function Get-AzVMStatus { param( [Parameter(Mandatory=$true)][string]$resourceGroup, [Parameter(Mandatory=$true)][string]$vmName, ) return (Get-AzVM -ResourceGroupName $resourceGroup -Name $vmName -Status).Statuses[1].DisplayStatus }]]></summary></entry><entry><title type="html">Start a comma separated list of Windows Services in Powershell</title><link href="https://parttimelegend.github.io/gistbook/gist/4d5dc2ee536afede360e7494b879311b" rel="alternate" type="text/html" title="Start a comma separated list of Windows Services in Powershell" /><published>2021-03-30T13:57:29+00:00</published><updated>2021-03-30T13:57:29+00:00</updated><id>https://parttimelegend.github.io/gistbook/gist/4d5dc2ee536afede360e7494b879311b</id><author><name>Tomáš Krupka</name></author><category term="gist" /><summary type="html"><![CDATA[param ($services) if ($null -eq $services) { $services = Read-Host -Prompt &quot;Please enter a comma seperated list of services&quot; if ($null -eq $services) { Write-Output &quot;No services specified. Exiting...&quot; Exit -1 } } $serviceList = $services.split(&quot;,&quot;); foreach($service in $serviceList) { $arrService = Get-Service -Name $service if ($null -eq $arrService) { Write-Output &quot;Service not found. Exiting...&quot; Exit -1 } while ($arrService.Status -ne &#39;Running&#39;) { Start-Service $service Write-Host $arrService.status Write-Host &quot;Starting $service&quot; Start-Sleep -Seconds 60 $arrService.Refresh() if ($arrService.Status -eq &#39;Running&#39;) { Write-Output &quot;$service is now Running&quot; } } }]]></summary></entry></feed>